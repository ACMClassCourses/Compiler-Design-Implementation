/*
Test Package: Codegen
Author: Yunwei Ren
Input:
=== input ===
100
58 18 71 22 37 93 47 50 3 9 53 95 45 14 74 48 44 20 12 73 29 10 19 28 87 20 27 85 56 87 18 11 55 15 19 10 69 69 29 70 96 69 53 10 30 87 73 26 21 95 19 24 3 25 10 9 67 25 79 41 10 9 48 96 11 44 69 62 47 31 64 21 50 31 11 34 15 51 4 65 71 55 92 49 8 26 27 36 96 4 77 47 4 2 66 41 15 78 7 56

=== end ===
Output:
=== output ===
2 3 3 4 4 4 7 8 9 9 9 10 10 10 10 10 11 11 11 12 14 15 15 15 18 18 19 19 19 20 20 21 21 22 24 25 25 26 26 27 27 28 29 29 30 31 31 34 36 37 41 41 44 44 45 47 47 47 48 48 49 50 50 51 53 53 55 55 56 56 58 62 64 65 66 67 69 69 69 69 70 71 71 73 73 74 77 78 79 85 87 87 87 92 93 95 95 96 96 96 

=== end ===
ExitCode: 0
InstLimit: -1
*/

class Slice_int {
  void init(int[] arr) {
    storage = arr;
    beg = 0;
    end = arr.size();
  }

  int size() {
    return end - beg;
  }

  int get(int n) {
    return storage[beg + n];
  }

  void set(int n, int val) {
    storage[beg + n] = val;
  }

  Slice_int slice(int l, int r) {
    Slice_int res = new Slice_int();
    res.storage = storage;
    res.beg = beg + l;
    res.end = beg + r;
    if (res.beg > storage.size() || res.end > storage.size())
      println("Warning: Slice_int::slice: out of range");
    return res;
  }

  Slice_int tail() {
    return slice(1, size());
  }

  void copy(Slice_int arr) {
    if (size() < arr.size()) {
      println("Warning: Slice_int::copy: size() < arr.size()");
    }
    int i;
    for (i = 0; i < arr.size(); ++i)
      storage[beg + i] = arr.get(i);
  }

  int[] cloneArray() {
    int[] res = new int[size()];
    int i;
    for (i = 0; i < size(); ++i) {
      res[i] = storage[beg + i];
    }
    return res;
  }

  int[] storage;
  int beg;
  int end;
};


Slice_int makeSlice_int(int[] arr) {
  Slice_int res = new Slice_int();
  res.init(arr);
  return res;
}
int[] merge(Slice_int l, Slice_int r) {
  if (l.size() == 0)
    return r.cloneArray();
  if (r.size() == 0)
    return l.cloneArray();

  int[] res = new int[l.size() + r.size()];
  Slice_int tail = makeSlice_int(res).tail();
  if (l.get(0) < r.get(0)) {
    res[0] = l.get(0);
    tail.copy(makeSlice_int(merge(l.tail(), r)));
  } else {
    res[0] = r.get(0);
    tail.copy(makeSlice_int(merge(l, r.tail())));
  }
  return res;
}


void mergeSort(Slice_int a) {
  if (a.size() == 1)
    return;
  int n = a.size();
  int m = n / 2;
  mergeSort(a.slice(0, m));
  mergeSort(a.slice(m, n));
  a.copy(makeSlice_int(merge(a.slice(0, m), a.slice(m, n))));
}


void mergeSortInf(int[] a) {
  mergeSort(makeSlice_int(a));
}


int main() {
  int n = getInt();
  int[] a = new int[n];

  int i;
  for (i = 0; i < n; ++i)
    a[i] = getInt();

  mergeSortInf(a);

  for (i = 0; i < n; ++i)
    print(toString(a[i]) + " ");
  println("");

  return 0;
}
