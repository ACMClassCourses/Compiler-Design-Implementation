/*
Test Package: Optim
Author: Yunwei Ren, 17
//#input kruskal.in
//#output kruskal.ans
ExitCode: 0
InstLimit: -1
*/

class Edge {
  int u;
  int v;
  int w;
};

int n;
int m;
Edge[] edges;
Edge[] buffer;

// disjoint set
int[] pnt;

void init() {
  n = getInt();
  m = getInt();
  edges = new Edge[m];
  buffer = new Edge[m];
  int i;
  for (i = 0; i < m; ++i) {
    edges[i] = new Edge;
    edges[i].u = getInt();
    edges[i].v = getInt();
    edges[i].w = getInt();
  }

  pnt = new int[n];
  for (i = 0; i < n; ++i)
    pnt[i] = -1;
}

void sort(int l, int r) {
  if (l + 1 == r)
    return;
  int mid = (l + r) / 2;
  sort(l, mid);
  sort(mid, r);

  int lpos = l;
  int rpos = mid;
  int i;
  for (i = 0; i < r - l; ++i) {
    if (lpos == mid) {
      buffer[i] = edges[rpos++];
      continue;
    }
    if (rpos == r) {
      buffer[i] = edges[lpos++];
      continue;
    }
    if (edges[lpos].w < edges[rpos].w) {
      buffer[i] = edges[lpos++];
      continue;
    }
    buffer[i] = edges[rpos++];
  }

  for (i = 0; i < r - l; ++i) {
    edges[l + i] = buffer[i];
  }
}

int findRoot(int x) {
  if (pnt[x] == -1)
    return x;
  int y = findRoot(pnt[x]);
  pnt[x] = y;
  return y;
}

void unionSets(int x, int y) {
  int px = findRoot(x);
  int py = findRoot(y);
  if (px == py)
    return;
  pnt[px] = py;
}

int main() {
  init();
  sort(0, m);

  int cnt = 0;
  int ans = 0;
  // Do not use condition cnt != n - 1 here. 
  // Otherwise the program will end too fast.
  int i; 
  for (i = 0; i < m; ++i) {
    if (findRoot(edges[i].u) == findRoot(edges[i].v))
      continue;
    unionSets(edges[i].u, edges[i].v);
    ++cnt;
    ans = ans + edges[i].w;
  }
  println(toString(ans));
  return 0;
}